<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorldZero.Common</name>
    </assembly>
    <members>
        <member name="M:WorldZero.Common.Interface.IModel.Eval``1(WorldZero.Common.Interface.ISingleValueObject{``0},``0)">
            <summary>
            This method will concisely return the value stored in the passed
            implementation of ISingleValueObject, or, if that argument is null,
            it will return the alternate value.
            </summary>
            <param name="svo">The ISingleValueObject implementation.</param>
            <param name="other">The default return value.</param>
            <typeparam name="T">
            The type of the single value in ISingleValueObject and other.
            </typeparam>
            <returns>Either the value in svo, if the instance in non-null, or
            other.</returns>
        </member>
        <member name="T:WorldZero.Common.Interface.ISingleValueObject`1">
            <summary>
            This class will serve as a contract for single-value ValueObject.
            </summary>
            <remarks>
            In truth, this really isn't very necessary, except EF Core is a little
            stinker and I do not have the energy to bludgeon it into accepting
            value objects, so here we are.
            </remarks>
            <typeparam name="T">The type of the single value.</typeparam>
        </member>
        <member name="T:WorldZero.Common.Interface.IValueObject">
            <summary>
            This is a class template for ValueObjects.
            
            Once subclasses have implemented GetAtomicValues, this class will
            handle: converting instances to a hash code; comparing an IValueObject
            to another object via Equals; comparing two IValueObjects via == and
            != .
            </summary>
        </member>
        <member name="M:WorldZero.Common.Interface.IValueObject.GetAtomicValues">
            <summary>
            The result of this method should only reference the immutable
            fields of the class - this is used by at least GetHashCode.
            </summary>
        </member>
        <member name="T:WorldZero.Common.ValueObject.Id">
            <summary>
            An Id is a ValueObject that contains a valid ID. An ID is valid iff it
            is non-negative.
            </summary>
            <exception cref="T:System.ArgumentException">
            This is thrown on ID set iff the ID is invalid.</exception>
            <remarks>
            The cutoff at 0 instead of 1 is because the models will default to not
            defining an ID, and EF Core starts counting IDs at 1, meaning that an
            ID that is 0 is unregistered with a repo, an ID greater than 0 is
            registered, and an ID less than 0 is invalid.
            </remarks>
        </member>
        <member name="T:WorldZero.Common.ValueObject.Level">
            <summary>
            A Level is a ValueObject that contains a valid level. A level is valid
            iff it is not below zero.
            </summary>
            <exception cref="T:System.ArgumentException">
            This is thrown on set iff the level is invalid.</exception>
        </member>
        <member name="T:WorldZero.Common.ValueObject.Name">
            <summary>
            A Name is a ValueObject that contains a valid name. A name is valid iff
            it is not null, not empty, and not just whitespace.
            </summary>
            <exception cref="T:System.ArgumentException">
            This is thrown on name set iff the name is invalid.</exception>
        </member>
        <member name="T:WorldZero.Common.ValueObject.PastDate">
            <summary>
            A PastDate is a ValueObject that contains a valid date. A date is valid iff
            it is not in the future.
            </summary>
            <exception cref="T:System.ArgumentException">
            This is thrown on name set iff the name is invalid.</exception>
        </member>
        <member name="T:WorldZero.Common.ValueObject.PointTotal">
            <summary>
            A PointTotal is a ValueObject that contains a valid point total. A
            point total is valid iff it is not below zero.
            </summary>
            <exception cref="T:System.ArgumentException">
            This is thrown on set iff the point total is invalid.</exception>
        </member>
    </members>
</doc>
